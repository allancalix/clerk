; Account names
(define monthly_kfc_stipend 500.00)

(define (remap_account name)
 (case name
  (("dLkx161njniBvw6B36LGIWJEvWnmjgfZ9lkD1") "Assets:Plaid-Checking")
  (("aZ8zQbQW4WiG5JNG9NbQU7wZp7nrBNh7noN1B") "Assets:Plaid-Savings")
  (("NEBoJDJxmxhdoaBdAB7eueRQveKzqyFWao3nD") "Liabilities:Plaid-Credit-Card")
  (else name)))

(define (with_payee_match_and_amount tx match amount)
  (and
    (contains (new Regexp :text (. tx :payee) :query match))
    (= (. tx :amount) amount)))

(define (categorize_income tx)
 (cond
  (else (.= tx :dest-account "Income:Unknown"))))

(define (categorize_expense tx)
 (cond
  ; Simple equality.
  ((= (. tx :processor) "Spectrum")
    (.= tx :dest-account "Expenses:Utilities:Internet"))
  ((contains (new Regexp :text (. tx :payee) :query "(?i)uber")) ; (?i) designates it as case-insensitive
      (.= tx :dest-account "Expenses:Transportation:Rideshare"))
  ((contains (new Regexp :text (. tx :payee) :query "(?i)(tectra|bicycle shop)"))
      (.= tx :dest-account "Expenses:Shopping"))
  ((with_payee_match_and_amount tx "(?i)KFC" monthly_kfc_stipend)
    (.= tx :dest-account "Expenses:Food:Restaurant"))
  (else (.= tx :dest-account "Expenses:Unknown"))))

; Splits expenses and income categorization functions.
(define (categorize tx)
 (cond
  ((< (. tx :amount) 0) (categorize_income tx))
  (else (categorize_expense tx))))


(define (alias_account tx)
 (.= tx :source-account (remap_account (. tx :source-account))))

(define (transform tx)
 (alias_account
     (categorize tx)))
